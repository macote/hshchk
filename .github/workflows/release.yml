name: release

env:
  PROJECT_NAME: hshchk
  PROJECT_DESC: "A command-line file tree hash checker."
  PROJECT_MAINTAINER: "Marc-André Côté <mac@live.ca>"
  PROJECT_HOMEPAGE: "https://github.com/macote/hshchk"

on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-18.04
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          version=$(echo ${{ github.event.ref }} | cut -d/ -f3)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: true

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS:
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-musl, linux-arm, linux-armv7, linux-aarch64, macos, win-msvc, win-gnu, win32-msvc, win32-gnu]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-musl
          os: ubuntu-18.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-18.04
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: linux-armv7
          os: ubuntu-18.04
          rust: stable
          target: armv7-unknown-linux-gnueabihf
        - build: linux-aarch64
          os: ubuntu-18.04
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2019
          rust: stable-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-2019
          rust: stable
          target: i686-pc-windows-msvc
        - build: win32-gnu
          os: windows-2019
          rust: stable-x86_64-gnu
          target: i686-pc-windows-gnu

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-18.04'
      run: sudo apt-get install -y --no-install-recommends liblz4-tool musl-tools

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV
        echo "release version: $RELEASE_VERSION"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}"

    - name: Build archive and deb package
      shell: bash
      run: |
        staging="${{ env.PROJECT_NAME }}-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"

        cp {README.md,LICENSE} "$staging/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/release/${{ env.PROJECT_NAME }}.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

        if [ "${{ matrix.os }}" = "ubuntu-18.04" ] && [[ ${{ matrix.target }} == x86_64* ]]; then
          dpkg="hshchk-${{ env.RELEASE_VERSION }}-${{ matrix.target }}.deb"
          echo "DPKG=$dpkg" >> $GITHUB_ENV
          dir="$staging/dpkg"
          mkdir -p "$dir"

          basename=${PROJECT_NAME}
          conflicts=${PROJECT_NAME}-musl
          case ${{ matrix.target }} in *-musl) basename=${PROJECT_NAME}-musl ; conflicts=${PROJECT_NAME} ;; esac;

          case ${{ matrix.target }} in
            arm-*-linux-*hf) arch=armhf ;;
            x86_64-*-linux-*) arch=amd64 ;;
          esac;

          # Binary
          install -Dm755 'target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' "$dir/usr/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}"
          if [ -n "${{ steps.vars.outputs.STRIP }}" ]; then "${{ steps.vars.outputs.STRIP }}" "$dir/usr/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}" ; fi

          # README and LICENSE
          install -Dm644 "README.md" "$dir/usr/share/doc/${{ env.PROJECT_NAME }}/README.md"
          install -Dm644 "LICENSE" "$dir/usr/share/doc/${{ env.PROJECT_NAME }}/LICENSE"

          cat > "$dir/usr/share/doc/${{ env.PROJECT_NAME }}/copyright" <<EOF
        Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: ${{ env.PROJECT_NAME }}
        Source: ${{ env.PROJECT_HOMEPAGE }}

        Files: *
        Copyright: ${{ env.PROJECT_MAINTAINER }}
        License: MIT

        License: MIT
         Permission is hereby granted, free of charge, to any
         person obtaining a copy of this software and associated
         documentation files (the "Software"), to deal in the
         Software without restriction, including without
         limitation the rights to use, copy, modify, merge,
         publish, distribute, sublicense, and/or sell copies of
         the Software, and to permit persons to whom the Software
         is furnished to do so, subject to the following
         conditions:
         .
         The above copyright notice and this permission notice
         shall be included in all copies or substantial portions
         of the Software.
         .
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
         ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
         TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
         PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
         SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
         CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
         OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
         IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
         DEALINGS IN THE SOFTWARE.
        EOF

          # control file
          mkdir -p "$dir/DEBIAN"
          cat > "$dir/DEBIAN/control" <<EOF
        Package: $basename
        Version: ${{ env.RELEASE_VERSION }}
        Section: utils
        Priority: optional
        Maintainer: ${{ env.PROJECT_MAINTAINER }}
        Homepage: ${{ env.PROJECT_HOMEPAGE }}
        Architecture: $arch
        Provides: ${{ env.PROJECT_NAME }}
        Conflicts: $conflicts
        Description: A command-line file tree hash checker.
        EOF

          # build dpkg
          fakeroot dpkg-deb --build "$dir" "$dpkg"
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

    - name: Upload release deb package
      if: matrix.os == 'ubuntu-18.04' && startsWith(matrix.target, 'x86_64')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.DPKG }}
        asset_name: ${{ env.DPKG }}
        asset_content_type: application/octet-stream
